name: Terraform Validate and Lint

on:
  pull_request:
    branches:
      - main # Trigger on Pull Requests targeting the main branch
    paths:
      - "**/*.tf" # Only run if Terraform files change
      - "**/*.tfvars" # Or Terraform variable files change
      - ".github/workflows/tf-validate-lint.yml" # Or this workflow file changes
  push:
    branches:
      - main
      - update-ci-workflow
    paths:
      - "**/*.tf"
      - "**/*.tfvars"
      - ".github/workflows/tf-validate-lint.yml"
  workflow_dispatch: # Allow manual triggering of the workflow

jobs:
  validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest

    # Required for github/codeql-action/upload-sarif to upload to Code Scanning
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: ubuntu-tflint-${{ hashFiles('.tflint.hcl') }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.2

      - name: Run tfsec scanner
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          soft_fail: true # action don't break the build
          github_token: ${{ github.token }}
          sarif_file: tfsec.sarif

      - name: Upload tfsec SARIF to GitHub
        if: always() # Always run this step, even if the previous one fails
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: tfsec.sarif

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0
      - name: Show version
        run: tflint --version

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: false # Fail the workflow if formatting is incorrect

      - name: Initialize TFLint
        run: tflint --init
        env:
          # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        id: lint
        run: tflint --recursive --format compact
        # Use --recursive to check all subdirectories
        # Use --format compact for cleaner output in logs
        continue-on-error: false # Fail the workflow on linting errors

      # Verify the dev environment configuration file (dev/dev.auto.tfvars)
      # contains the mandatory 'project' and 'environment' values.
      # This is crucial for maintaining the expected infrastructure naming
      - name: Verify dev.auto.tfvars content
        run: |
          echo "Checking dev/dev.auto.tfvars for specific required values..."
          grep 'project\s*=\s*"piksel"' dev/dev.auto.tfvars || (echo "Error: 'project = \"piksel\"' not found or changed in dev/dev.auto.tfvars"; exit 1)
          grep 'environment\s*=\s*"dev"' dev/dev.auto.tfvars || (echo "Error: 'environment = \"dev\"' not found or changed in dev/dev.auto.tfvars"; exit 1)
          echo "Required values in dev/dev.auto.tfvars verified."

      - name: Verify shared.auto.tfvars content
        run: |
          echo "Checking shared/shared.auto.tfvars for specific required values..."
          grep 'project\s*=\s*"piksel"' shared/shared.auto.tfvars || (echo "Error: 'project = \"piksel\"' not found or value incorrect in shared/shared.auto.tfvars"; exit 1)
          grep 'environment\s*=\s*"shared"' shared/shared.auto.tfvars || (echo "Error: 'environment = \"shared\"' not found or value incorrect in shared/shared.auto.tfvars"; exit 1)
          echo "Required values in shared/shared.auto.tfvars verified."

      # --- Validation per Environment ---
      # Note: These steps assume the directory structure exists.
      # If staging/prod directories don't exist yet, these specific steps might fail
      # until the directories are added with at least basic .tf files.
      - name: Terraform Init (Dev)
        id: init-dev
        run: cd dev && terraform init -backend=false
        # -backend=false prevents state locking/reading during validation

      - name: Terraform Validate (Dev)
        id: validate-dev
        run: cd dev && terraform validate

      - name: Terraform Init (Shared)
        id: init-shared
        run: cd shared && terraform init -backend=false
        # -backend=false prevents state locking/reading during validation

      - name: Terraform Validate (Shared)
        id: validate-shared
        run: cd shared && terraform validate

  infracost-pull-request-checks:
    name: Infracost Pull Request Checks
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write # Required to post comments

    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Checkout the base branch of the pull request (e.g. main/master)
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: "${{ github.event.pull_request.base.ref }}"

      # Generate Infracost JSON file as the baseline for dev environment
      - name: Generate Infracost cost estimate baseline (Dev)
        run: |
          cd dev
          infracost breakdown --path=. \
                              --format=json \
                              --out-file=/tmp/infracost-base-dev.json

      # Generate Infracost JSON file as the baseline for shared environment
      - name: Generate Infracost cost estimate baseline (Shared)
        run: |
          cd shared
          infracost breakdown --path=. \
                              --format=json \
                              --out-file=/tmp/infracost-base-shared.json

      # Checkout the current PR branch so we can create a diff
      - name: Checkout PR branch
        uses: actions/checkout@v4

      # Generate an Infracost diff for dev environment
      - name: Generate Infracost diff (Dev)
        run: |
          cd dev
          infracost diff --path=. \
                          --format=json \
                          --compare-to=/tmp/infracost-base-dev.json \
                          --out-file=/tmp/infracost-dev.json

      # Generate an Infracost diff for shared environment
      - name: Generate Infracost diff (Shared)
        run: |
          cd shared
          infracost diff --path=. \
                          --format=json \
                          --compare-to=/tmp/infracost-base-shared.json \
                          --out-file=/tmp/infracost-shared.json

      # Combine the Infracost JSON files
      - name: Combine Infracost JSON files
        run: |
          infracost output --path="/tmp/infracost-dev.json,/tmp/infracost-shared.json" \
                          --format=json \
                          --out-file=/tmp/infracost-combined.json

      # Post a comment to the PR
      - name: Post Infracost comment
        run: |
          infracost comment github --path=/tmp/infracost-combined.json \
                                  --repo=$GITHUB_REPOSITORY \
                                  --github-token=${{ github.token }} \
                                  --pull-request=${{ github.event.pull_request.number }} \
                                  --behavior=update

  # Add this job to update Infracost Cloud when changes are pushed to main
  infracost-default-branch-update:
    name: Infracost Default Branch Update
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'update-ci-workflow')
    runs-on: ubuntu-latest
    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Checkout main branch
        uses: actions/checkout@v4

      # Run Infracost for dev environment
      - name: Run Infracost on default branch (Dev)
        run: |
          cd dev
          infracost breakdown --path=. \
                    --format=json \
                    --out-file=/tmp/infracost-dev.json

      # Run Infracost for shared environment
      - name: Run Infracost on default branch (Shared)
        run: |
          cd shared
          infracost breakdown --path=. \
                    --format=json \
                    --out-file=/tmp/infracost-shared.json

      # Combine and upload to Infracost Cloud
      - name: Combine and upload to Infracost Cloud
        run: |
          infracost output --path="/tmp/infracost-dev.json,/tmp/infracost-shared.json" \
                          --format=json \
                          --out-file=/tmp/infracost-combined.json

          infracost upload --path=/tmp/infracost-combined.json || echo "Always pass main branch runs even if there are policy failures"

  # Update PR status in Infracost Cloud when PR is closed/merged
  infracost-pull-request-status-update:
    name: Infracost PR Status Update
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Infracost PR Status Update
        run: |
          PR_STATUS="MERGED"
          if [[ ${{ github.event.pull_request.merged }} = false ]]; then PR_STATUS="CLOSED"; fi

          echo "Updating status of ${{ github.event.pull_request.html_url }} to $PR_STATUS"
          curl -i \
            --request POST \
            --header "Content-Type: application/json" \
            --header "X-API-Key: $INFRACOST_API_KEY" \
            --data "{ \"query\": \"mutation {updatePullRequestStatus( url: \\\"${{ github.event.pull_request.html_url }}\\\", status: $PR_STATUS )}\" }" \
            "https://dashboard.api.infracost.io/graphql";
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
